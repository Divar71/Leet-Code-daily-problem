Given an m x n matrix, return all elements of the matrix in spiral order.

Example 1:
Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [1,2,3,6,9,8,7,4,5]

Example 2:
Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
Output: [1,2,3,4,8,12,11,10,9,5,6,7]
 

Constraints:
m == matrix.length
n == matrix[i].length
1 <= m, n <= 10
-100 <= matrix[i][j] <= 100


CODE FILE:

class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        List<Integer> l1 = new ArrayList<Integer>();
        //left
        int l=0,b=matrix.length-1,r=matrix[0].length-1,t=0;
        while(l<=r || t<=b){
                if(t<=b){
                    for(int i=l;i<=r;i++)
                    l1.add(matrix[t][i]);
                    t++;
                }
                if(l<=r){
                    for(int i=t;i<=b;i++)
                    l1.add(matrix[i][r]);
                    r--;
                }
                if(t<=b){
                    for(int i=r;i>=l;i--)
                    l1.add(matrix[b][i]);
                    b--;
                }
                if(l<=r){
                    for(int i=b;i>=t;i--)
                    l1.add(matrix[i][l]);
                    l++;
                }
        }
        return l1;
    }
}
