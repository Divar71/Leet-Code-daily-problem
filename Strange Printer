class Solution {
    public int strangePrinter(String s) {
        int n = s.length();
        int[][] dp = new int[n][n];

        // Base case: Single characters require 1 turn.
        for (int i = 0; i < n; i++) {
            dp[i][i] = 1;
        }

        // Length of substrings, ranging from 2 to n.
        for (int len = 2; len <= n; len++) {
            // Start index of the substring.
            for (int i = 0; i <= n - len; i++) {
                int j = i + len - 1; // End index of the substring.

                // Initialize dp[i][j] with one more than dp[i][j-1].
                dp[i][j] = 1 + dp[i][j - 1];

                // Check if any character between i and j matches character at index j.
                for (int k = i; k < j; k++) {
                    if (s.charAt(k) == s.charAt(j)) {
                        // If matching character found, reduce the turns needed by combining substrings.
                        dp[i][j] = Math.min(dp[i][j], dp[i][k] + dp[k + 1][j - 1]);
                    }
                }
            }
        }

        // The answer will be in dp[0][n-1], which represents the entire string.
        return dp[0][n - 1];
    }
}
